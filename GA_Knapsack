# Algoritmo genético para solucionar o "Knapsack problem"
# Planejando uma viagem, temos que escolher um conjunto de itens para incluir em uma mochila.
# O peso dos itens não pode exceder 3kg (suas costas agradecem).
# Além do peso, cada item tem sua própria importância, expressada em valores numéricos.
# Portanto, o problema consiste em escolher uma combinação de itens que, não excedendo 3kg, apresente o maior valor acumulado de importância.
# Tentar realizar todas as combinações aleatoriamente e escolher a melhor opção é uma alternativa.
# Essa abordagem consistiria em utilizar um algoritmo de "força bruta"
# Entretanto, o número de permutações cresce exponencialmente com a quantidade de itens.
# Assim, um algoritmo de força bruta é inviável para um número de itens elevado.
# Para 77 itens, por exemplo, o algoritmo levaria 5 bilhões de anos para calcular a melhor solução.

#===================================================================================================================================================================

from random import choices, randint, randrange, random
from collections import namedtuple
import matplotlib.pyplot as plt


Item = namedtuple('Item',['nome', 'valor', 'peso'])
itens = [
    Item('Laptop', 500, 2200),
    Item('Headphones', 150, 160),
    Item('Caneca', 60, 350),
    Item('Casaco', 40, 400),
    Item('Balinhas', 5, 25),
    Item('Meias', 10, 38),
    Item('Lenços', 15, 80),
    Item('Celular', 600, 200),
    Item('Livro', 190, 70)
]

n_mochilas = 25
n_itens = len(itens)
limite_peso = 3000
limite_fitness = 1500
limite_geracoes = 1000

#===================================================================================================================================================================

# Gerar combinação aleatória de itens (com zeros e uns) com um tamanho 'length'
def gerar_genoma(length):
    return choices([0,1], k = length)

#===================================================================================================================================================================

# Gerar população de n_mochilas aleatórias, cada uma composta por seu genoma aleatório de n_itens
def gerar_populacao(n_mochilas, n_itens):
    return [gerar_genoma(n_itens) for _ in range(n_mochilas)]

#===================================================================================================================================================================

# Calcular fitness (valor total) para cada mochila. Se o peso exceder o limite, o fitness é 0.
def fitness(genoma):   
    peso = 0
    valor = 0

    for i, item in enumerate(itens):
        if genoma[i] == 1:
            peso += item.peso
            valor += item.valor

            if peso > limite_peso:
                return 0

    return valor

#===================================================================================================================================================================

# Selecionar um pai e uma mãe da população, baseado em seus fitnesses. O resultado é uma lista com um par de mochilas.
def selecionar_pais (populacao):
    return choices(population = populacao, weights = [fitness(genoma) for genoma in populacao], k=2)

#===================================================================================================================================================================

# Cruzar os pais (a e b) para gerar dois filhos como uma tupla. Os genes são cruzados em intervalos aleatórios.
def crossover (a, b):
    lenght = len(a)
    # Se o genoma (mochila) tiver menos que dois genes (itens), não faz sentido cruzar
    if lenght < 2:
        return a, b

    p = randint(1, lenght - 1)
    return a[0:p] + b[p:], b[0:p] + a[p:]

#===================================================================================================================================================================

# Mutar os genes de uma mochila com uma probabilidade de 5%
def mutacao (genoma, prob=0.05):
    # Pegar um item aleatório da mochila
    index = randrange(len(genoma))
    # Não fazer nada se a probabilidade nãos se concretizar. Caso contrário, mudar o item.
    genoma[index] = genoma[index] if random() > prob else abs(genoma[index]-1)
    return genoma

#===================================================================================================================================================================

# Rodar a evolução utilizando as funções predefinidas
def rodar_evolucao(limite_fitness):
    # Gerar a população inicial
    populacao = gerar_populacao (n_mochilas, n_itens)
    geracoes = []
    fitness_values = []

    # Para cada população atual, criar uma nova geração até atingir o limite de fitness ou de gerações.
    for i in range(limite_geracoes):
        # Ordenar a população segundo o fitness
        populacao = sorted(populacao, key = lambda genoma: fitness(genoma), reverse = True)

        if fitness(populacao[0]) >= limite_fitness:
            break
        
        # Aplicar elitismo. Os dois melhores genomas (mochilas) da população continuam na seguinte geração.
        prox_geracao = populacao [0:2]

        # O range é metade da população, pois cada iteração gera dois filhos (mochilas novas).
        # Subtraímos 1 em função do elitismo.
        for _ in range (int(len(populacao)/2)-1):
            pais = selecionar_pais(populacao)
            filho_a, filho_b = crossover(pais[0], pais[1])
            filho_a = mutacao(filho_a)
            filho_b = mutacao(filho_b)
            prox_geracao += [filho_a, filho_b]
        
        populacao = prox_geracao
        populacao = sorted(populacao, key = lambda genoma: fitness(genoma), reverse = True)
        geracoes.append(i)
        fitness_values.append(fitness(populacao[0]))
    

    return populacao, i, geracoes, fitness_values
#===================================================================================================================================================================

def genoma_para_itens(genoma):
    lst = []
    for i, item in enumerate(itens):
        if genoma[i] == 1:
            lst += [item.nome]
    return lst

#===================================================================================================================================================================

populacao, geracao, geracoes, fitness_values = rodar_evolucao(limite_fitness)
print(f'Número de gerações:{geracao}')
print(f'Melhor solução: {genoma_para_itens(populacao[0])}, Fitness: {fitness(populacao[0])}')
plt.plot(geracoes, fitness_values)
plt.xlabel('Geração')
plt.ylabel("Valor Fitness")
plt.show()
